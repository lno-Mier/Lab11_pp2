CREATE OR REPLACE FUNCTION get_records_by_pattern(pattern TEXT)
RETURNS TABLE(id INT, user_name TEXT, phone TEXT) AS $$
BEGIN
    RETURN QUERY
    SELECT id, user_name, phone
    FROM phone_book
    WHERE user_name ILIKE '%' || pattern || '%'
       OR phone ILIKE '%' || pattern || '%';
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE PROCEDURE upsert_user(new_user_name TEXT, new_phone TEXT)
LANGUAGE plpgsql AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM phone_book WHERE user_name = new_user_name) THEN
        UPDATE phone_book
        SET phone = new_phone
        WHERE user_name = new_user_name;
    ELSE
        INSERT INTO phone_book (user_name, phone)
        VALUES (new_user_name, new_phone);
    END IF;
END;
$$;



CREATE OR REPLACE PROCEDURE delete_by_name(IN f_name TEXT, IN l_name TEXT)
LANGUAGE plpgsql
AS $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM phonebook WHERE first_name = f_name AND last_name = l_name
    ) THEN
        DELETE FROM phonebook WHERE first_name = f_name AND last_name = l_name;
        RAISE NOTICE 'Запись с именем % и фамилией % успешно удалена.', f_name, l_name;
    ELSE
        RAISE NOTICE 'Запись с указанным именем и фамилией не найдена.';
    END IF;
END;
$$;



CREATE OR REPLACE PROCEDURE delete_by_phone(IN phone_num TEXT)
LANGUAGE plpgsql
AS $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM phonebook WHERE phonebook.phone_number = phone_num
    ) THEN
        DELETE FROM phonebook WHERE phonebook.phone_number = phone_num;
        RAISE NOTICE 'Запись с номером телефона % успешно удалена.', phone_num;
    ELSE
        RAISE NOTICE 'Запись с указанным номером телефона не найдена.';
    END IF;
END;
$$;